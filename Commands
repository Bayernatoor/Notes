r(f"\n{line1}\n{line2}\n{line3}") 
Gives : each input for each line will be written down :  
Line1 
Line2 
Line3 
 
Len(): outputs the size in bytes of the file inside the parenthesis. 
Ex: print(f"The input file is {len(indata)} bytes long")  
Here the indata is a variable, attached to it is the file we are reading. Since it's inside the len() and within a print(f"") string, it will provide us the size of the file when ran.  
 
 
Exists() : a module that checks to see if the file in the parenthesis exists or not. 
 
 
Def : This stands for 'define' and used to create a 'function' 
 
A function is a block of organized, reusable code that is used to perform a single, related action. Functions provide better modularity for your application and a high degree of code reusing. 
As you already know, Python gives you many built-in functions like print(), etc. but you can also create your own functions. These functions are called user-defined functions. 
 
You can define functions to provide the required functionality. Here are simple rules to define a function in Python. 
 • Function blocks begin with the keyword def followed by the function name and parentheses ( ( ) ). 
 • Any input parameters or arguments should be placed within these parentheses. You can also define parameters inside these parentheses. 
 • The first statement of a function can be an optional statement - the documentation string of the function or docstring. 
 • The code block within every function starts with a colon (:) and is indented. 
 • The statement return [expression] exits a function, optionally passing back an expression to the caller. A return statement with no arguments is the same as return None. 
EX:  
# this one is like your script with argv 
def print_two(*args): 
    arg1, arg2 = args 
    print(f"arg1: {arg1}, arg2: {arg2}") 
 
# okay, that *args is actually pointless, we can just do This 
def print_two_again(arg1, arg2): 
    print(f"arg1: {arg1}, arg2: {arg2}") 
 
# this just takes one argument 
def print_one(arg1): 
    print(f"arg1: {arg1}") 
 
# this one takes no arguments 
def print_none(): 
    print("I got nothin'." 
 
From <https://www.tutorialspoint.com/python/python_functions.htm>  
 
Variables inside a function are temporary and when returned it can be assigned to a different variable for later. 
 
Return: The statement return [expression] exits a function, optionally passing back an expression to the caller. A return statement with no arguments is the same as return None. 
 
Sys.argv :  
 
 
If: 
 
.encode: 
 
.decode: 
 
.strip: 
 
utf-8:
