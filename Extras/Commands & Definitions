Print: The start of a string, allows me to use quotes to write text to the user.  
Ex: print("I'd much rather you 'not'.") 
 
print(x) :  Prints variable x 
 
Strings : A section of text that the user can see. 
 
Variable: a word of any type that can be used along with = to set it to a specific value. 
Ex: space_in_a_car = 4.0 - the variable space_in_a_car is now equal to 4.0 
 
.format() :  
Formatters work by putting in one or more replacement fields or placeholders — defined by a pair of curly braces {} — into a string and calling the str.format() method. You’ll pass into the method the value you want to concatenate with the string. This value will be passed through in the same place that your placeholder is positioned when you run the program. 
 
From <https://www.digitalocean.com/community/tutorials/how-to-use-string-formatters-in-python-3>  
 
https://pyformat.info/#number 
https://www.digitalocean.com/community/tutorials/how-to-use-string-formatters-in-python-3 
 
False or True (Boolean Values):  
Boolean values are the two constant objects False and True.  
They are used to represent truth values (other values can also be considered false or true).  
In numeric contexts (for example, when used as the argument to an arithmetic operator), they behave like the integers 0 and 1, respectively. 
The built-in function bool() can be used to cast any value to a Boolean, if the value can be interpreted as a truth value 
They are written as False and True, respectively.  
 
Remember that the built-in type Boolean can hold only one of two possible objects: True or False 
 
From <https://www.pythonforbeginners.com/basics/boolean/>  
 
end = ' ' : Used to tie separate print functions together, instead there being a linefeed - it instead makes a space and  continues with the text. 
Ex: print(end1 + end2 + end3 + end4 + end5 + end6, end = ' ') 
print(end7 + end8 + end9 + end10 + end11 + end12) 
The above  = Cheese Burger, instead of: 
Cheese 
Burger 
 
Print ("""  
Anything within the triple quotes will be included in the in the string (text on screen) - if this string were run in python all of it would appear on the screen. 
""") 
 
Input(): age = input(), would request an input from the user, the user can then input anything. That value entered will then be associated to the variable age. Age can now we used however you'd use a variable.  
 
Ex: you can also use it like this :  
X = input(y)  
 Y = anything you want assigned to this variable. 
 When prompted for an answer the y var will be printed. 
  
 y = '>' 
 x = input(y) 
  
 print("x") 
  
  
 
 
from sys import argv : 1st - import, this allows you to add modules to your script - in this case ARGV, which in turn allows you to use arguments in the script. 
 
Broken down it imports the ARGV 'Module' from the SYS folder of python.  
 
It is then used in this way : 
script, first, second, third = argv 
When running the script you must include the script name and the number of arguments specified when creating it. 
 
Characters when handling text files: 
 
 'r'     open for reading (default) 
 
 'w' :   open for writing, truncating the file first 
 
 'x' :   create a new file and open it for writing 
 
 'a' :  open for writing, appending to the end of the file if it exists 
 
  'b' :  binary mode 
 
  't' :   text mode (default) 
 
  '+' :   open a disk file for updating (reading and writing) 
 
  'U' :    universal newline mode (deprecated) 
 
Commands: 
 
close(): 
.close:  Closes the file. Like File->Save.. in your editor. 
 
.open() : opens the file 
 
.read:  Reads the contents of the file. You can assign the result to a variable. 
 
.Readline:  Reads just one line of a text file. 
 
.Truncate: Empties the file. Watch out if you care about the file. 
 
.write('stuff'):  Writes "stuff" to the file. 
 
.seek(0): Move the read/write location to the beginning of the file. 
 
str:  The str() method returns the "informal" or nicely printable representation of a given object. 

From <https://www.programiz.com/python-programming/methods/built-in/str>  
 
Ex: text = str(f"\n{line1}\n{line2}\n{line3}") 
Gives : each input for each line will be written down :  
Line1 
Line2 
Line3 
 
Len(): outputs the size in bytes of the file inside the parenthesis. 
Ex: print(f"The input file is {len(indata)} bytes long")  
Here the indata is a variable, attached to it is the file we are reading. Since it's inside the len() and within a print(f"") string, it will provide us the size of the file when ran.  
 
 
Exists() : a module that checks to see if the file in the parenthesis exists or not. 
 
 
Def : This stands for 'define' and used to create a 'function' 
 
A function is a block of organized, reusable code that is used to perform a single, related action. Functions provide better modularity for your application and a high degree of code reusing. 
As you already know, Python gives you many built-in functions like print(), etc. but you can also create your own functions. These functions are called user-defined functions. 
 
You can define functions to provide the required functionality. Here are simple rules to define a function in Python. 
 • Function blocks begin with the keyword def followed by the function name and parentheses ( ( ) ). 
 • Any input parameters or arguments should be placed within these parentheses. You can also define parameters inside these parentheses. 
 • The first statement of a function can be an optional statement - the documentation string of the function or docstring. 
 • The code block within every function starts with a colon (:) and is indented. 
 • The statement return [expression] exits a function, optionally passing back an expression to the caller. A return statement with no arguments is the same as return None. 

EX:  
# this one is like your script with argv 
def print_two(*args): 
    arg1, arg2 = args 
    print(f"arg1: {arg1}, arg2: {arg2}") 
 
# okay, that *args is actually pointless, we can just do This 
def print_two_again(arg1, arg2): 
    print(f"arg1: {arg1}, arg2: {arg2}") 
 
# this just takes one argument 
def print_one(arg1): 
    print(f"arg1: {arg1}") 
 
# this one takes no arguments 
def print_none(): 
    print("I got nothin'." 
 
From <https://www.tutorialspoint.com/python/python_functions.htm>  
 
Variables inside a function are temporary and when returned it can be assigned to a different variable for later. 
 
Return: The statement return [expression] exits a function, optionally passing back an expression to the caller. A return statement with no arguments is the same as return None. 
 
 
.encode: Will 'Encode' a string to bytes
 
.decode: Will decode bytes into a string 
 
.strip: strips out/removes something - ex: the \n at the end of sentence so that when it prints you get this:
a
b 
instead of:
a

b
 
utf-8: A covention for encoding text in Python - It allows for the use of 8 bit encoding but also to escape out and use 16 or 32 bit encoding if required.
This saves space compared to encoding only with unicode which is 32 bit encoding.


The Truth Terms

In Python we have the following terms (characters and phrases) for determining if something is ”True”
or ”False.” Logic on a computer is all about seeing if some combination of these characters and some
variables is True at that point in the program.

• and
• or
• not
• != (not equal)
• == (equal)
• >= (greater-than-equal)
• <= (less-than-equal)
• True
• False

You actually have run into these characters before but maybe not the terms. The terms (and, or, not)
actually work the way you expect them to, just like in English.

The Truth Tables


NOT True?
not False True
not True False

OR True?
True or False True
True or True True
False or True True
False or False False

AND True?
True and False False
True and True True
False and True False
False and False False

NOT OR True?
not (True or False) False
not (True or True) False
not (False or True) False
not (False or False) True

NOT AND True?
not (True and False) True
not (True and True) False
not (False and True) True
not (False and False) True

!= True?
1 != 0 True
1 != 1 False
0 != 1 True
0 != 0 False

== True?
1 == 0 False
1 == 1 True
0 == 1 False
0 == 0 True

If: use it to execute a block of code, if a specified condition is true

Elif: use it to execute a block of code, if the same condition is false

Else : use it to specify a new condition to test, if the first condition is false



